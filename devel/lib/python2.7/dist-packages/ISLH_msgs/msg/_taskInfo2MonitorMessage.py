# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ISLH_msgs/taskInfo2MonitorMessage.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class taskInfo2MonitorMessage(genpy.Message):
  _md5sum = "306235d16ea68afd7b8cdaafd193738f"
  _type = "ISLH_msgs/taskInfo2MonitorMessage"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# The task's information to monitoringISLH

string taskUUID # the task's UUID

uint16 encounteringRobotID #robot id which encounters the task

int16 responsibleUnit # "who is responsible for the task"

uint64 encounteringTime #The encountering time

uint64 startHandlingTime #the time when the task starts being handled

geometry_msgs/Point posXY  # The position of the task

string taskResource

uint16 handlingDuration # in seconds - "the required time to handle the task"

uint16 timeOutDuration # "the timed-out duration for the task"

uint16 status # "status of the task"

uint64 taskSiteRadius

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['taskUUID','encounteringRobotID','responsibleUnit','encounteringTime','startHandlingTime','posXY','taskResource','handlingDuration','timeOutDuration','status','taskSiteRadius']
  _slot_types = ['string','uint16','int16','uint64','uint64','geometry_msgs/Point','string','uint16','uint16','uint16','uint64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       taskUUID,encounteringRobotID,responsibleUnit,encounteringTime,startHandlingTime,posXY,taskResource,handlingDuration,timeOutDuration,status,taskSiteRadius

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(taskInfo2MonitorMessage, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.taskUUID is None:
        self.taskUUID = ''
      if self.encounteringRobotID is None:
        self.encounteringRobotID = 0
      if self.responsibleUnit is None:
        self.responsibleUnit = 0
      if self.encounteringTime is None:
        self.encounteringTime = 0
      if self.startHandlingTime is None:
        self.startHandlingTime = 0
      if self.posXY is None:
        self.posXY = geometry_msgs.msg.Point()
      if self.taskResource is None:
        self.taskResource = ''
      if self.handlingDuration is None:
        self.handlingDuration = 0
      if self.timeOutDuration is None:
        self.timeOutDuration = 0
      if self.status is None:
        self.status = 0
      if self.taskSiteRadius is None:
        self.taskSiteRadius = 0
    else:
      self.taskUUID = ''
      self.encounteringRobotID = 0
      self.responsibleUnit = 0
      self.encounteringTime = 0
      self.startHandlingTime = 0
      self.posXY = geometry_msgs.msg.Point()
      self.taskResource = ''
      self.handlingDuration = 0
      self.timeOutDuration = 0
      self.status = 0
      self.taskSiteRadius = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.taskUUID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Hh2Q3d().pack(_x.encounteringRobotID, _x.responsibleUnit, _x.encounteringTime, _x.startHandlingTime, _x.posXY.x, _x.posXY.y, _x.posXY.z))
      _x = self.taskResource
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3HQ().pack(_x.handlingDuration, _x.timeOutDuration, _x.status, _x.taskSiteRadius))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.posXY is None:
        self.posXY = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskUUID = str[start:end].decode('utf-8')
      else:
        self.taskUUID = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.encounteringRobotID, _x.responsibleUnit, _x.encounteringTime, _x.startHandlingTime, _x.posXY.x, _x.posXY.y, _x.posXY.z,) = _get_struct_Hh2Q3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskResource = str[start:end].decode('utf-8')
      else:
        self.taskResource = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.handlingDuration, _x.timeOutDuration, _x.status, _x.taskSiteRadius,) = _get_struct_3HQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.taskUUID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_Hh2Q3d().pack(_x.encounteringRobotID, _x.responsibleUnit, _x.encounteringTime, _x.startHandlingTime, _x.posXY.x, _x.posXY.y, _x.posXY.z))
      _x = self.taskResource
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3HQ().pack(_x.handlingDuration, _x.timeOutDuration, _x.status, _x.taskSiteRadius))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.posXY is None:
        self.posXY = geometry_msgs.msg.Point()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskUUID = str[start:end].decode('utf-8')
      else:
        self.taskUUID = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.encounteringRobotID, _x.responsibleUnit, _x.encounteringTime, _x.startHandlingTime, _x.posXY.x, _x.posXY.y, _x.posXY.z,) = _get_struct_Hh2Q3d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.taskResource = str[start:end].decode('utf-8')
      else:
        self.taskResource = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.handlingDuration, _x.timeOutDuration, _x.status, _x.taskSiteRadius,) = _get_struct_3HQ().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_Hh2Q3d = None
def _get_struct_Hh2Q3d():
    global _struct_Hh2Q3d
    if _struct_Hh2Q3d is None:
        _struct_Hh2Q3d = struct.Struct("<Hh2Q3d")
    return _struct_Hh2Q3d
_struct_3HQ = None
def _get_struct_3HQ():
    global _struct_3HQ
    if _struct_3HQ is None:
        _struct_3HQ = struct.Struct("<3HQ")
    return _struct_3HQ
