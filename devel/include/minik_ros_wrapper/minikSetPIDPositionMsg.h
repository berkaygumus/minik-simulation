// Generated by gencpp from file minik_ros_wrapper/minikSetPIDPositionMsg.msg
// DO NOT EDIT!


#ifndef MINIK_ROS_WRAPPER_MESSAGE_MINIKSETPIDPOSITIONMSG_H
#define MINIK_ROS_WRAPPER_MESSAGE_MINIKSETPIDPOSITIONMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace minik_ros_wrapper
{
template <class ContainerAllocator>
struct minikSetPIDPositionMsg_
{
  typedef minikSetPIDPositionMsg_<ContainerAllocator> Type;

  minikSetPIDPositionMsg_()
    : motorID()
    , P()
    , I()
    , D()  {
    }
  minikSetPIDPositionMsg_(const ContainerAllocator& _alloc)
    : motorID(_alloc)
    , P(_alloc)
    , I(_alloc)
    , D(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _motorID_type;
  _motorID_type motorID;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _P_type;
  _P_type P;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _I_type;
  _I_type I;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _D_type;
  _D_type D;





  typedef boost::shared_ptr< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> const> ConstPtr;

}; // struct minikSetPIDPositionMsg_

typedef ::minik_ros_wrapper::minikSetPIDPositionMsg_<std::allocator<void> > minikSetPIDPositionMsg;

typedef boost::shared_ptr< ::minik_ros_wrapper::minikSetPIDPositionMsg > minikSetPIDPositionMsgPtr;
typedef boost::shared_ptr< ::minik_ros_wrapper::minikSetPIDPositionMsg const> minikSetPIDPositionMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace minik_ros_wrapper

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'minik_ros_wrapper': ['/home/berkay/catkin_ws/src/minik_realization/minik_packages/minik_ros_wrapper/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d3c57d08264ba7635ea33c90d92b0139";
  }

  static const char* value(const ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd3c57d08264ba763ULL;
  static const uint64_t static_value2 = 0x5ea33c90d92b0139ULL;
};

template<class ContainerAllocator>
struct DataType< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "minik_ros_wrapper/minikSetPIDPositionMsg";
  }

  static const char* value(const ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Minik Set Position PID Message\n\
\n\
int32[] motorID\n\
char[] P\n\
char[] I\n\
char[] D\n\
";
  }

  static const char* value(const ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.motorID);
      stream.next(m.P);
      stream.next(m.I);
      stream.next(m.D);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct minikSetPIDPositionMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::minik_ros_wrapper::minikSetPIDPositionMsg_<ContainerAllocator>& v)
  {
    s << indent << "motorID[]" << std::endl;
    for (size_t i = 0; i < v.motorID.size(); ++i)
    {
      s << indent << "  motorID[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.motorID[i]);
    }
    s << indent << "P[]" << std::endl;
    for (size_t i = 0; i < v.P.size(); ++i)
    {
      s << indent << "  P[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.P[i]);
    }
    s << indent << "I[]" << std::endl;
    for (size_t i = 0; i < v.I.size(); ++i)
    {
      s << indent << "  I[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.I[i]);
    }
    s << indent << "D[]" << std::endl;
    for (size_t i = 0; i < v.D.size(); ++i)
    {
      s << indent << "  D[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.D[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MINIK_ROS_WRAPPER_MESSAGE_MINIKSETPIDPOSITIONMSG_H
