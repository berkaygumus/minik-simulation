// Generated by gencpp from file ISLH_msgs/cmd2LeadersMessage.msg
// DO NOT EDIT!


#ifndef ISLH_MSGS_MESSAGE_CMD2LEADERSMESSAGE_H
#define ISLH_MSGS_MESSAGE_CMD2LEADERSMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ISLH_msgs
{
template <class ContainerAllocator>
struct cmd2LeadersMessage_
{
  typedef cmd2LeadersMessage_<ContainerAllocator> Type;

  cmd2LeadersMessage_()
    : leaderRobotID()
    , sendingTime(0)
    , messageTypeID()
    , message()  {
    }
  cmd2LeadersMessage_(const ContainerAllocator& _alloc)
    : leaderRobotID(_alloc)
    , sendingTime(0)
    , messageTypeID(_alloc)
    , message(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _leaderRobotID_type;
  _leaderRobotID_type leaderRobotID;

   typedef uint64_t _sendingTime_type;
  _sendingTime_type sendingTime;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _messageTypeID_type;
  _messageTypeID_type messageTypeID;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _message_type;
  _message_type message;





  typedef boost::shared_ptr< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> const> ConstPtr;

}; // struct cmd2LeadersMessage_

typedef ::ISLH_msgs::cmd2LeadersMessage_<std::allocator<void> > cmd2LeadersMessage;

typedef boost::shared_ptr< ::ISLH_msgs::cmd2LeadersMessage > cmd2LeadersMessagePtr;
typedef boost::shared_ptr< ::ISLH_msgs::cmd2LeadersMessage const> cmd2LeadersMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ISLH_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ISLH_msgs': ['/home/berkay/catkin_ws/src/ISLH_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dea84c50c103ccf3d723b1874cc1b015";
  }

  static const char* value(const ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdea84c50c103ccf3ULL;
  static const uint64_t static_value2 = 0xd723b1874cc1b015ULL;
};

template<class ContainerAllocator>
struct DataType< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ISLH_msgs/cmd2LeadersMessage";
  }

  static const char* value(const ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The task's information from coalition leader\n\
\n\
uint16[] leaderRobotID #robot id to which the message will be sent \n\
\n\
uint64 sendingTime #The sending time\n\
\n\
uint16[] messageTypeID\n\
\n\
string[] message\n\
";
  }

  static const char* value(const ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leaderRobotID);
      stream.next(m.sendingTime);
      stream.next(m.messageTypeID);
      stream.next(m.message);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cmd2LeadersMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ISLH_msgs::cmd2LeadersMessage_<ContainerAllocator>& v)
  {
    s << indent << "leaderRobotID[]" << std::endl;
    for (size_t i = 0; i < v.leaderRobotID.size(); ++i)
    {
      s << indent << "  leaderRobotID[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.leaderRobotID[i]);
    }
    s << indent << "sendingTime: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.sendingTime);
    s << indent << "messageTypeID[]" << std::endl;
    for (size_t i = 0; i < v.messageTypeID.size(); ++i)
    {
      s << indent << "  messageTypeID[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.messageTypeID[i]);
    }
    s << indent << "message[]" << std::endl;
    for (size_t i = 0; i < v.message.size(); ++i)
    {
      s << indent << "  message[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.message[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISLH_MSGS_MESSAGE_CMD2LEADERSMESSAGE_H
