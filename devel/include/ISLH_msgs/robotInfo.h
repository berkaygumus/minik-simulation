// Generated by gencpp from file ISLH_msgs/robotInfo.msg
// DO NOT EDIT!


#ifndef ISLH_MSGS_MESSAGE_ROBOTINFO_H
#define ISLH_MSGS_MESSAGE_ROBOTINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ISLH_msgs
{
template <class ContainerAllocator>
struct robotInfo_
{
  typedef robotInfo_<ContainerAllocator> Type;

  robotInfo_()
    : neighbors()
    , posX(0.0)
    , posY(0.0)
    , radius(0.0)
    , targetX(0.0)
    , targetY(0.0)  {
    }
  robotInfo_(const ContainerAllocator& _alloc)
    : neighbors(_alloc)
    , posX(0.0)
    , posY(0.0)
    , radius(0.0)
    , targetX(0.0)
    , targetY(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _neighbors_type;
  _neighbors_type neighbors;

   typedef float _posX_type;
  _posX_type posX;

   typedef float _posY_type;
  _posY_type posY;

   typedef float _radius_type;
  _radius_type radius;

   typedef float _targetX_type;
  _targetX_type targetX;

   typedef float _targetY_type;
  _targetY_type targetY;





  typedef boost::shared_ptr< ::ISLH_msgs::robotInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ISLH_msgs::robotInfo_<ContainerAllocator> const> ConstPtr;

}; // struct robotInfo_

typedef ::ISLH_msgs::robotInfo_<std::allocator<void> > robotInfo;

typedef boost::shared_ptr< ::ISLH_msgs::robotInfo > robotInfoPtr;
typedef boost::shared_ptr< ::ISLH_msgs::robotInfo const> robotInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ISLH_msgs::robotInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ISLH_msgs::robotInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ISLH_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ISLH_msgs': ['/home/berkay/catkin_ws/src/ISLH_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ISLH_msgs::robotInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ISLH_msgs::robotInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ISLH_msgs::robotInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ISLH_msgs::robotInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ISLH_msgs::robotInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ISLH_msgs::robotInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ISLH_msgs::robotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "efd1aeeed9405e7a52385c335c0151bb";
  }

  static const char* value(const ::ISLH_msgs::robotInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xefd1aeeed9405e7aULL;
  static const uint64_t static_value2 = 0x52385c335c0151bbULL;
};

template<class ContainerAllocator>
struct DataType< ::ISLH_msgs::robotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ISLH_msgs/robotInfo";
  }

  static const char* value(const ::ISLH_msgs::robotInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ISLH_msgs::robotInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#The robot's information that is relayed to the other robots\n\
\n\
string[] neighbors #Neighbor robot names\n\
\n\
float32 posX # The current position of the robot at x direction\n\
float32 posY # The current position of the robot at y direction\n\
\n\
float32 radius # The radius of the robot\n\
\n\
float32 targetX # The current target position of the robot at x direction\n\
float32 targetY # The current target position of the robot at y direction\n\
";
  }

  static const char* value(const ::ISLH_msgs::robotInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ISLH_msgs::robotInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.neighbors);
      stream.next(m.posX);
      stream.next(m.posY);
      stream.next(m.radius);
      stream.next(m.targetX);
      stream.next(m.targetY);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robotInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ISLH_msgs::robotInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ISLH_msgs::robotInfo_<ContainerAllocator>& v)
  {
    s << indent << "neighbors[]" << std::endl;
    for (size_t i = 0; i < v.neighbors.size(); ++i)
    {
      s << indent << "  neighbors[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.neighbors[i]);
    }
    s << indent << "posX: ";
    Printer<float>::stream(s, indent + "  ", v.posX);
    s << indent << "posY: ";
    Printer<float>::stream(s, indent + "  ", v.posY);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "targetX: ";
    Printer<float>::stream(s, indent + "  ", v.targetX);
    s << indent << "targetY: ";
    Printer<float>::stream(s, indent + "  ", v.targetY);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISLH_MSGS_MESSAGE_ROBOTINFO_H
