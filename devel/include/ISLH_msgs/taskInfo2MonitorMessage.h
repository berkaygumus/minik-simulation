// Generated by gencpp from file ISLH_msgs/taskInfo2MonitorMessage.msg
// DO NOT EDIT!


#ifndef ISLH_MSGS_MESSAGE_TASKINFO2MONITORMESSAGE_H
#define ISLH_MSGS_MESSAGE_TASKINFO2MONITORMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace ISLH_msgs
{
template <class ContainerAllocator>
struct taskInfo2MonitorMessage_
{
  typedef taskInfo2MonitorMessage_<ContainerAllocator> Type;

  taskInfo2MonitorMessage_()
    : taskUUID()
    , encounteringRobotID(0)
    , responsibleUnit(0)
    , encounteringTime(0)
    , startHandlingTime(0)
    , posXY()
    , taskResource()
    , handlingDuration(0)
    , timeOutDuration(0)
    , status(0)
    , taskSiteRadius(0)  {
    }
  taskInfo2MonitorMessage_(const ContainerAllocator& _alloc)
    : taskUUID(_alloc)
    , encounteringRobotID(0)
    , responsibleUnit(0)
    , encounteringTime(0)
    , startHandlingTime(0)
    , posXY(_alloc)
    , taskResource(_alloc)
    , handlingDuration(0)
    , timeOutDuration(0)
    , status(0)
    , taskSiteRadius(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _taskUUID_type;
  _taskUUID_type taskUUID;

   typedef uint16_t _encounteringRobotID_type;
  _encounteringRobotID_type encounteringRobotID;

   typedef int16_t _responsibleUnit_type;
  _responsibleUnit_type responsibleUnit;

   typedef uint64_t _encounteringTime_type;
  _encounteringTime_type encounteringTime;

   typedef uint64_t _startHandlingTime_type;
  _startHandlingTime_type startHandlingTime;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _posXY_type;
  _posXY_type posXY;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _taskResource_type;
  _taskResource_type taskResource;

   typedef uint16_t _handlingDuration_type;
  _handlingDuration_type handlingDuration;

   typedef uint16_t _timeOutDuration_type;
  _timeOutDuration_type timeOutDuration;

   typedef uint16_t _status_type;
  _status_type status;

   typedef uint64_t _taskSiteRadius_type;
  _taskSiteRadius_type taskSiteRadius;





  typedef boost::shared_ptr< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> const> ConstPtr;

}; // struct taskInfo2MonitorMessage_

typedef ::ISLH_msgs::taskInfo2MonitorMessage_<std::allocator<void> > taskInfo2MonitorMessage;

typedef boost::shared_ptr< ::ISLH_msgs::taskInfo2MonitorMessage > taskInfo2MonitorMessagePtr;
typedef boost::shared_ptr< ::ISLH_msgs::taskInfo2MonitorMessage const> taskInfo2MonitorMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ISLH_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ISLH_msgs': ['/home/berkay/catkin_ws/src/ISLH_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "306235d16ea68afd7b8cdaafd193738f";
  }

  static const char* value(const ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x306235d16ea68afdULL;
  static const uint64_t static_value2 = 0x7b8cdaafd193738fULL;
};

template<class ContainerAllocator>
struct DataType< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ISLH_msgs/taskInfo2MonitorMessage";
  }

  static const char* value(const ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The task's information to monitoringISLH\n\
\n\
string taskUUID # the task's UUID\n\
\n\
uint16 encounteringRobotID #robot id which encounters the task\n\
\n\
int16 responsibleUnit # \"who is responsible for the task\"\n\
\n\
uint64 encounteringTime #The encountering time\n\
\n\
uint64 startHandlingTime #the time when the task starts being handled\n\
\n\
geometry_msgs/Point posXY  # The position of the task\n\
\n\
string taskResource\n\
\n\
uint16 handlingDuration # in seconds - \"the required time to handle the task\"\n\
\n\
uint16 timeOutDuration # \"the timed-out duration for the task\"\n\
\n\
uint16 status # \"status of the task\"\n\
\n\
uint64 taskSiteRadius\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.taskUUID);
      stream.next(m.encounteringRobotID);
      stream.next(m.responsibleUnit);
      stream.next(m.encounteringTime);
      stream.next(m.startHandlingTime);
      stream.next(m.posXY);
      stream.next(m.taskResource);
      stream.next(m.handlingDuration);
      stream.next(m.timeOutDuration);
      stream.next(m.status);
      stream.next(m.taskSiteRadius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct taskInfo2MonitorMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ISLH_msgs::taskInfo2MonitorMessage_<ContainerAllocator>& v)
  {
    s << indent << "taskUUID: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.taskUUID);
    s << indent << "encounteringRobotID: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.encounteringRobotID);
    s << indent << "responsibleUnit: ";
    Printer<int16_t>::stream(s, indent + "  ", v.responsibleUnit);
    s << indent << "encounteringTime: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.encounteringTime);
    s << indent << "startHandlingTime: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.startHandlingTime);
    s << indent << "posXY: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.posXY);
    s << indent << "taskResource: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.taskResource);
    s << indent << "handlingDuration: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.handlingDuration);
    s << indent << "timeOutDuration: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.timeOutDuration);
    s << indent << "status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.status);
    s << indent << "taskSiteRadius: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.taskSiteRadius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISLH_MSGS_MESSAGE_TASKINFO2MONITORMESSAGE_H
